// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bookmark.sql

package db

import (
	"context"
)

const deleteBookmarkByHologId = `-- name: DeleteBookmarkByHologId :one
DELETE FROM public.bookmark
WHERE user_id = $1 AND holog_id = $2
RETURNING user_id, holog_id
`

type DeleteBookmarkByHologIdParams struct {
	UserID  string `json:"user_id"`
	HologID int32  `json:"holog_id"`
}

type DeleteBookmarkByHologIdRow struct {
	UserID  string `json:"user_id"`
	HologID int32  `json:"holog_id"`
}

func (q *Queries) DeleteBookmarkByHologId(ctx context.Context, arg DeleteBookmarkByHologIdParams) (DeleteBookmarkByHologIdRow, error) {
	row := q.db.QueryRow(ctx, deleteBookmarkByHologId, arg.UserID, arg.HologID)
	var i DeleteBookmarkByHologIdRow
	err := row.Scan(&i.UserID, &i.HologID)
	return i, err
}

const getBookmarkByUserIDAndPlaceID = `-- name: GetBookmarkByUserIDAndPlaceID :one
SELECT b.user_id, h.place_id
FROM public.bookmark b
JOIN public.holog h ON b.holog_id = h.id
WHERE b.user_id = $1 AND h.place_id = $2
`

type GetBookmarkByUserIDAndPlaceIDParams struct {
	UserID  string `json:"user_id"`
	PlaceID string `json:"place_id"`
}

type GetBookmarkByUserIDAndPlaceIDRow struct {
	UserID  string `json:"user_id"`
	PlaceID string `json:"place_id"`
}

func (q *Queries) GetBookmarkByUserIDAndPlaceID(ctx context.Context, arg GetBookmarkByUserIDAndPlaceIDParams) (GetBookmarkByUserIDAndPlaceIDRow, error) {
	row := q.db.QueryRow(ctx, getBookmarkByUserIDAndPlaceID, arg.UserID, arg.PlaceID)
	var i GetBookmarkByUserIDAndPlaceIDRow
	err := row.Scan(&i.UserID, &i.PlaceID)
	return i, err
}

const setBookmarkByHologId = `-- name: SetBookmarkByHologId :one
INSERT INTO public.bookmark (user_id, holog_id)
VALUES ($1, $2)
RETURNING user_id, holog_id
`

type SetBookmarkByHologIdParams struct {
	UserID  string `json:"user_id"`
	HologID int32  `json:"holog_id"`
}

type SetBookmarkByHologIdRow struct {
	UserID  string `json:"user_id"`
	HologID int32  `json:"holog_id"`
}

func (q *Queries) SetBookmarkByHologId(ctx context.Context, arg SetBookmarkByHologIdParams) (SetBookmarkByHologIdRow, error) {
	row := q.db.QueryRow(ctx, setBookmarkByHologId, arg.UserID, arg.HologID)
	var i SetBookmarkByHologIdRow
	err := row.Scan(&i.UserID, &i.HologID)
	return i, err
}
