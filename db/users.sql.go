// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO public.users (id, password, username, created_at)
VALUES ($1, $2, $3, CURRENT_DATE)
RETURNING id, password, username, profile_image_url, created_at, deleted_at
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Password, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Username,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, password, username, profile_image_url, created_at, deleted_at
FROM public.users
WHERE id = $1 AND password = $2 AND deleted_at IS NULL
`

type GetUserByEmailAndPasswordParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndPassword, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Username,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, password, username, profile_image_url, created_at, deleted_at
FROM public.users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.Username,
		&i.ProfileImageUrl,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
