// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO public.users (id, password, username)
VALUES ($1, $2, $3)
RETURNING id, username
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
	Username string `json:"username"`
}

type CreateUserRow struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Password, arg.Username)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
UPDATE public.users
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, username
`

type DeleteUserByIDRow struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) DeleteUserByID(ctx context.Context, id string) (DeleteUserByIDRow, error) {
	row := q.db.QueryRow(ctx, deleteUserByID, id)
	var i DeleteUserByIDRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, username, profile_image_url
FROM public.users
WHERE id = $1 AND password = $2 AND deleted_at IS NULL
`

type GetUserByEmailAndPasswordParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

type GetUserByEmailAndPasswordRow struct {
	ID              string  `json:"id"`
	Username        string  `json:"username"`
	ProfileImageUrl *string `json:"profile_image_url"`
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (GetUserByEmailAndPasswordRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndPassword, arg.ID, arg.Password)
	var i GetUserByEmailAndPasswordRow
	err := row.Scan(&i.ID, &i.Username, &i.ProfileImageUrl)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, profile_image_url
FROM public.users
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID              string  `json:"id"`
	Username        string  `json:"username"`
	ProfileImageUrl *string `json:"profile_image_url"`
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.ID, &i.Username, &i.ProfileImageUrl)
	return i, err
}
